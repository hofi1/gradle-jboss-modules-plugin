import static org.gradle.api.JavaVersion.VERSION_1_7

plugins {
    id 'com.gradle.plugin-publish'
    id 'idea'
    id 'groovy'
    id 'jacoco'
    id 'com.github.kt3k.coveralls'
    id 'checkstyle'
    id 'com.github.spotbugs'
    id 'maven'
}

repositories {
    mavenCentral()
    jcenter()
}

checkstyle {
    toolVersion = '8.15'
}

spotbugs {
    toolVersion = '3.1.10'
    excludeFilter = file("$rootProject.projectDir/config/spotbugs/exclude.xml")
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// To generate an HTML report instead of XML
tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

group = 'com.github.zhurlik'

targetCompatibility = VERSION_1_7

dependencies {
    compile gradleApi()
    compile localGroovy()
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('tmp-repo'))
        }
    }
}

tasks.test.doFirst{
    // for travis-ci.org
    logging.captureStandardOutput LogLevel.INFO
    logging.level = LogLevel.WARN
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

// custom task for creating source jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// custom task for creating doc jar
task groovydocJar(type: Jar, dependsOn: 'groovydoc') {
    from groovydoc.destinationDir
    classifier = 'javadoc'
}

// add source/doc jar tasks as artifacts
artifacts {
    archives jar
    archives sourcesJar, groovydocJar
}

tasks.clean.doFirst {
    delete 'tmp-repo/com'
}

// The configuration example below shows the minimum required properties
// configured to publish your plugin to the plugin portal
pluginBundle {
    website = 'https://github.com/zhurlik'
    vcsUrl = 'https://github.com/zhurlik/gradle-jboss-modules-plugin'
    description = 'A gradle plugin that allows to make JBoss Modules'
    tags = ['java', 'jboss', 'module', 'gradle', 'plugin', 'groovy', 'wildfly']

    plugins {
        jbossModulesPlugin {
            id = 'com.github.zhurlik.jbossmodules'
            displayName = 'Gradle JBoss Modules plugin'
        }
    }
}